const GAME_CONSTANTS = {
  GRID_SIZE: 5,
  TARGET_WORDS: [
    "ÎßàÎ≤ï",
    "Îû®ÌîÑ",
    "Î≥¥Î¨º",
    "ÏñëÌÉÑÏûê",
    "ÏÑ∏Í∞ÄÏßÄ",
    "ÏÑ∏Í≥Ñ",
    "ÌÉÄÎã§",
    "ÏÜåÏõê",
    "ÏãúÏû•",
    "ÎèôÍµ¥",
  ],
  CONFUSING_WORDS: {
    ÏïåÎùºÎîò: [
      "Ïñº",
      "ÎûÑ",
      "Îçú",
      "Ïùº",
      "Î•º",
      "Îì†",
      "ÏñÑ",
      "Î¶¥",
      "Îã¨",
      "Î¶∞",
      "Ïó¥",
      "Î¶¥",
      "Ïò¨",
      "Ïö∏",
      "Ïóò",
      "Î¶¨",
      "Î£®",
      "Îîú",
      "Îëî",
      "Î°ú",
      "Îî©",
      "ÎìÑ",
    ],
    ÎßàÎ≤ï: [
      "Î®Ä",
      "Î®∏",
      "Î©∞",
      "ÎØÄ",
      "ÎØ∏",
      "Î™®",
      "Î¨ò",
      "Î¨¥",
      "ÎÆ§",
      "ÎØÄ",
      "ÎØ∏",
      "Î≤î",
      "Î∂ë",
      "Î∞•",
      "Î±Å",
      "Î∏ù",
      "Îπï",
      "Î¥Ö",
      "Î©à",
      "Ìéç",
      "Ìïç",
      "Ìíâ",
      "Ìéå",
    ],
    Îû®ÌîÑ: [
      "Îûå",
      "Îüº",
      "Î°¨",
      "Î¶º",
      "Î¶Ñ",
      "Îß¥",
      "Ìë∏",
      "Ìè¨",
      "Ìì®",
      "Ìëú",
      "Ìéò",
      "Ìé¥",
      "Ìîº",
      "Î∏å",
      "ÎπÑ",
      "Îû©",
      "ÎüΩ",
      "Îûç",
      "Ìåå",
      "Ìçº",
      "Ìå®",
      "Î†ò",
      "ÎØÄ",
    ],
    Î≥¥Î¨º: [
      "ÎπÑ",
      "Î≤Ñ",
      "Î∞î",
      "Î∂Ä",
      "Î∏å",
      "Îµ§",
      "Î≤º",
      "Î¨¥",
      "Î™®",
      "Î®∏",
      "Îßà",
      "Î©∞",
      "Î®Ä",
      "ÎØ∏",
      "ÎÆ§",
      "Î™®",
      "Î©Ä",
      "ÎØà",
      "Îß§",
      "Î¨ò",
      "ÎØÄ",
      "Î©î",
      "Î™∞",
    ],
    ÏñëÌÉÑÏûê: [
      "Ïûâ",
      "ÏòÅ",
      "Ïö©",
      "Ïúµ",
      "Ïñ≠",
      "ÌÖ¨",
      "Ìã¥",
      "ÌÜ§",
      "Ìà∞",
      "ÌÑ¥",
      "Ïùë",
      "ÌÜà",
      "ÏßÄ",
      "Ï°∞",
      "Ï£º",
      "Ï†Ä",
      "Ïûê",
      "Ïü§",
      "Ï°î",
      "Ï¶à",
      "Ï†∏",
      "Ïüà",
    ],
    ÏÑ∏Í∞ÄÏßÄ: [
      "ÏÖ∞",
      "ÏÖî",
      "ÏÉ§",
      "Ïãú",
      "ÏÜå",
      "ÏÑÄ",
      "ÏÉà",
      "Í∏∞",
      "Í±∞",
      "Í≥†",
      "Ïûê",
      "Ï°∞",
      "Ï£º",
      "Ï°î",
      "Ïü§",
      "Ï†Ä",
      "Ï¶à",
      "Ï£º",
      "Ï•¨",
      "ÏßÄ",
      "Ï†ú",
      "Ïüà",
    ],
    ÏÑ∏Í≥Ñ: [
      "ÏÖ∞",
      "ÏÑÄ",
      "ÏÉà",
      "ÏÉ§",
      "ÏÖî",
      "Ïáº",
      "ÏÜå",
      "Ïàò",
      "ÏÇ¨",
      "Í±î",
      "Í∞ú",
      "Í≤®",
      "Í∞∏",
      "Íµ¨",
      "Í∏∞",
      "Í∞Ä",
      "Í∏∞",
      "Í≥†",
      "Í∑ú",
      "Íµê",
      "Í≥Ñ",
      "Í≥Ñ",
      "Í±î",
    ],
    ÌÉÄÎã§: [
      "Ìã∞",
      "ÌÑ∞",
      "ÌÜ†",
      "Ìä∏",
      "Ìà¨",
      "Ìä∏",
      "ÌÉ∏",
      "ÌÑî",
      "ÌÖå",
      "Îîî",
      "ÎèÑ",
      "Îëê",
      "Îçî",
      "Îçî",
      "Îç∞",
      "Îéå",
      "Îê¥",
      "Îé®",
      "ÎìÄ",
      "Îìú",
      "ÎåÄ",
      "Îéå",
      "Îåú",
    ],
    ÏÜåÏõê: [
      "Ïáº",
      "Ïäà",
      "ÏÇ¨",
      "Ïãú",
      "ÏÇ¨",
      "ÏÑú",
      "ÏÉà",
      "ÏÖ∞",
      "ÏÖî",
      "Ïä§",
      "ÏÑÄ",
      "ÏÑ∏",
      "Ïïà",
      "Ïö¥",
      "Ïïà",
      "Ïñ∏",
      "Ïù∏",
      "ÏùÄ",
      "Ïö¥",
      "Ïñ∏",
      "ÏñÄ",
      "Ïñú",
      "Ïòå",
    ],
    ÏãúÏû•: [
      "ÏÇ¨",
      "ÏÑú",
      "ÏÜå",
      "Ïàò",
      "Ïäà",
      "Ïä§",
      "ÏÉ§",
      "ÏÖî",
      "Ïáº",
      "ÏÉà",
      "ÏÑ∏",
      "ÏÖ∞",
      "ÏÑÄ",
      "Ïßï",
      "Ï†ï",
      "Ï¢Ö",
      "Ï§ë",
      "Ï¶Å",
      "Ï¶ù",
      "Ï£µ",
      "Ïüù",
      "ÏüÅ",
      "Ï†±",
    ],
    ÎèôÍµ¥: [
      "Îèù",
      "Îë•",
      "Îì±",
      "Îìï",
      "Îãπ",
      "Îî©",
      "Îç©",
      "Îé°",
      "Îå±",
      "Îåï",
      "ÎéÖ",
      "Îèî",
      "Îèà",
      "Í∑§",
      "Í∏Ä",
      "Í∏∏",
      "Í∞à",
      "Í±∏",
      "Í≥®",
      "Íµò",
      "Í≤∞",
      "Í±Ä",
      "Í∞§",
    ],
  },
};

class WordGame {
  constructor() {
    this.gridSize = GAME_CONSTANTS.GRID_SIZE;
    this.correctWord = this.getRandomTargetWord();
    this.correctGuesses = new Set();
    this.generatedWords = this.getConfusingWords(this.correctWord);

    this.elements = {
      startScreen: document.getElementById("startScreen"),
      gameScreen: document.getElementById("gameScreen"),
      startGameButton: document.getElementById("startGameButton"),
      speakIntroButton: document.getElementById("speakIntro"),
      listenButton: document.getElementById("listenButton"),
      helpButton: document.getElementById("helpButton"),
      helpModal: document.getElementById("helpModal"),
      helpModalOverlay: document.getElementById("helpModalOverlay"),
      closeModalButton: document.getElementById("closeModalButton"),
      helpSpeakButton: document.getElementById("helpSpeakBtn"),
      grid: document.getElementById("grid"),
      resetModal: document.getElementById("resetModal"),
      modalOverlay: document.getElementById("modalOverlay"),
      congratsMessage: document.getElementById("modalMessage"),
      checkButton: document.getElementById("checkButton"),
    };

    this.initializeEventListeners();
  }

  initializeEventListeners() {
    this.elements.startGameButton.addEventListener("pointerdown", () =>
      this.startGame()
    );

    this.elements.listenButton.addEventListener("pointerdown", () =>
      speakTextWithAzure(this.correctWord)
    );

    this.elements.speakIntroButton.addEventListener("pointerdown", () =>
      speakTextWithAzure("Ïà®ÏùÄ Îã®Ïñ¥ Ï∞æÍ∏∞")
    );

    this.elements.helpButton.addEventListener("pointerdown", () =>
      this.showHelpModal()
    );

    this.elements.closeModalButton.addEventListener("pointerdown", () =>
      this.closeHelpModal()
    );
    this.elements.helpModalOverlay.addEventListener("pointerdown", () =>
      this.closeHelpModal()
    );

    this.elements.helpSpeakButton.addEventListener("pointerdown", () =>
      speakTextWithAzure(
        "Îì£Í∏∞ Î≤ÑÌäºÏùÑ ÎàÑÎ•¥Î©¥ Îã®Ïñ¥Î•º Îì§ÏùÑ Ïàò ÏûàÏñ¥. Í∏ÄÏûêÏÜçÏóêÏÑú Î∞©Í∏à Îì§ÏùÄ Îã®Ïñ¥Î•º ÏàúÏÑúÎåÄÎ°ú Ï∞æÏïÑÏ§ò!"
      )
    );

    this.elements.checkButton.addEventListener("pointerdown", () =>
      this.resetGame()
    );

    this.elements.grid.addEventListener("pointerdown", (e) => {
      if (e.target.classList.contains("cell")) {
        this.checkAnswer(e.target);
      }
    });
    this.observeSectionChange();
  }

  observeSectionChange() {
    const observer = new MutationObserver(() => {
      if (this.elements.startScreen.classList.contains("hidden")) {
        console.log("üîÑ ÏÑπÏÖò Î≥ÄÍ≤Ω Í∞êÏßÄ! Î∞∞Í≤Ω ÏùåÏïÖ Ï§ëÏßÄ");
        this.elements.bgMusic.pause();
        this.elements.bgMusic.currentTime = 0;
      }
    });

    observer.observe(this.elements.startScreen, {
      attributes: true,
      attributeFilter: ["class"],
    });
  }

  getRandomTargetWord() {
    return GAME_CONSTANTS.TARGET_WORDS[
      Math.floor(Math.random() * GAME_CONSTANTS.TARGET_WORDS.length)
    ];
  }

  getConfusingWords(targetWord) {
    return [...GAME_CONSTANTS.CONFUSING_WORDS[targetWord]];
  }

  startGame() {
    this.elements.startScreen.classList.add("hidden");
    this.elements.gameScreen.classList.remove("hidden");

    const targetWordDisplay = document.getElementById("targetWordDisplay");
    targetWordDisplay.textContent = this.correctWord;
    targetWordDisplay.classList.add("loop-animation");

    this.createGrid();
  }

  createGrid() {
    this.elements.grid.innerHTML = "";
    this.correctGuesses.clear();

    let gridArray = Array(this.gridSize * this.gridSize).fill(null);
    let positions = [];

    let isHorizontal = Math.random() > 0.5;
    let startX = Math.floor(
      Math.random() * (this.gridSize - this.correctWord.length + 1)
    );
    let startY = Math.floor(
      Math.random() * (this.gridSize - this.correctWord.length + 1)
    );

    for (let i = 0; i < this.correctWord.length; i++) {
      let pos = isHorizontal
        ? startY * this.gridSize + (startX + i)
        : (startY + i) * this.gridSize + startX;
      gridArray[pos] = this.correctWord[i];
      positions.push(pos);
    }

    this.shuffleArray(this.generatedWords);
    for (let i = 0; i < gridArray.length; i++) {
      if (!gridArray[i]) {
        gridArray[i] = this.generatedWords.pop();
      }
    }

    gridArray.forEach((char, index) => {
      const cell = document.createElement("div");
      cell.classList.add("cell");
      cell.textContent = char;
      if (positions.includes(index)) cell.dataset.correct = "true";
      this.elements.grid.appendChild(cell);
    });
  }

  showHelpModal() {
    this.elements.helpModal.style.display = "block";
    this.elements.helpModalOverlay.style.display = "block";
  }

  closeHelpModal() {
    this.elements.helpModal.style.display = "none";
    this.elements.helpModalOverlay.style.display = "none";
  }

  checkAnswer(cell) {
    speakTextWithAzure(cell.textContent);

    if (cell.dataset.correct) {
      cell.classList.add("correct");
      this.correctGuesses.add(cell.textContent);

      const correctLetters = this.correctWord.split("");
      const allCorrect = correctLetters.every((letter) =>
        this.correctGuesses.has(letter)
      );

      if (allCorrect) {
        setTimeout(() => {
          cell.classList.remove("wrong");
          speakTextWithAzure("Îî©ÎèôÎåï");
          submitGameResult(true);
          this.showResultModal("Ï†ïÎãµÏù¥Ïïº ! Î©ãÏßÑÎç∞ ! üòé", true);
        }, 500);
      }
    } else {
      cell.classList.add("wrong");

      setTimeout(() => {
        cell.classList.remove("wrong");
        speakTextWithAzure("ÏÇêÏùµ");
        submitGameResult(false);
        this.showResultModal("Îã§Ïãú ÎèÑÏ†Ñ Ìï¥Î≥ºÍπå ? üßê", false);
      }, 500);
    }
  }
  showResultModal(message, isCorrect) {
    this.elements.congratsMessage.textContent = message;
    this.elements.resetModal.style.display = "block";
    this.elements.modalOverlay.style.display = "block";

    this.elements.checkButton.innerHTML = "";
    this.elements.checkButton.style.background = "none";
    this.elements.checkButton.style.border = "none";

    if (isCorrect) {
      this.elements.checkButton.innerHTML = `
    <button id="nextGameButton" class="modal-btn">Îã§Ïùå Í≤åÏûÑÏúºÎ°ú !</button>
`;

      document.getElementById("nextGameButton").onclick = () => {
        window.location.href = "/flip";
      };

      document.getElementById("retryGameButton").onclick = () => {
        this.resetWithNewWord();
      };
    } else {
      this.elements.checkButton.innerHTML = `
            <button id="retryOnlyButton" class="modal-btn">Ïùë !</button>
        `;

      document.getElementById("retryOnlyButton").onclick = () => {
        this.retrySameWord();
      };
    }
  }
  retrySameWord() {
    this.elements.resetModal.style.display = "none";
    this.elements.modalOverlay.style.display = "none";
  }

  resetWithNewWord() {
    this.elements.resetModal.style.display = "none";
    this.elements.modalOverlay.style.display = "none";

    this.correctWord = this.getRandomTargetWord();
    this.correctGuesses.clear();
    this.generatedWords = this.getConfusingWords(this.correctWord);

    const targetWordDisplay = document.getElementById("targetWordDisplay");
    targetWordDisplay.textContent = this.correctWord;
    targetWordDisplay.classList.remove("loop-animation");
    void targetWordDisplay.offsetWidth;
    targetWordDisplay.classList.add("loop-animation");

    this.createGrid();
  }

  shuffleArray(array) {
    for (let i = array.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [array[i], array[j]] = [array[j], array[i]];
    }
  }
}

new WordGame();

// score Í∏∞Îä•ÏùÑ ÏúÑÌï¥ Ï∂îÍ∞ÄÌïú Î∂ÄÎ∂Ñ
function submitGameResult(isCorrect) {
  const gameName = "Í∏ÄÏûêÏù∏Ïãù"; // üî§ Í∏ÄÏûê Ï∞æÍ∏∞ Í≤åÏûÑ
  fetch("https://52.141.27.150/submit_evaluation", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ game_name: gameName, success: isCorrect ? 1 : 0 }),
  })
    .then((response) => response.json())
    .then((data) => console.log(`‚úÖ ${gameName} Í≤∞Í≥º Ï†ÑÏÜ° ÏôÑÎ£å:`, data))
    .catch((error) => console.error(`‚ùå ${gameName} Í≤∞Í≥º Ï†ÑÏÜ° Ïã§Ìå®:`, error));
}
